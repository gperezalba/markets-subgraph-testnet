// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class NewChange extends EthereumEvent {
  get params(): NewChange__Params {
    return new NewChange__Params(this);
  }
}

export class NewChange__Params {
  _event: NewChange;

  constructor(event: NewChange) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get change(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewCommission extends EthereumEvent {
  get params(): NewCommission__Params {
    return new NewCommission__Params(this);
  }
}

export class NewCommission__Params {
  _event: NewCommission;

  constructor(event: NewCommission) {
    this._event = event;
  }

  get prev(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get current(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BuyPi extends EthereumEvent {
  get params(): BuyPi__Params {
    return new BuyPi__Params(this);
  }
}

export class BuyPi__Params {
  _event: BuyPi;

  constructor(event: BuyPi) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get piAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SellPi extends EthereumEvent {
  get params(): SellPi__Params {
    return new SellPi__Params(this);
  }
}

export class SellPi__Params {
  _event: SellPi;

  constructor(event: SellPi) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Market__contractBalanceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Market__getExchangeInfoReceivingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Market__getExchangeInfoSendingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Market extends SmartContract {
  static bind(address: Address): Market {
    return new Market("Market", address);
  }

  change(): BigInt {
    let result = super.call("change", []);

    return result[0].toBigInt();
  }

  try_change(): CallResult<BigInt> {
    let result = super.tryCall("change", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  on(): boolean {
    let result = super.call("on", []);

    return result[0].toBoolean();
  }

  try_on(): CallResult<boolean> {
    let result = super.tryCall("on", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  charger(): Address {
    let result = super.call("charger", []);

    return result[0].toAddress();
  }

  try_charger(): CallResult<Address> {
    let result = super.tryCall("charger", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  commission(): BigInt {
    let result = super.call("commission", []);

    return result[0].toBigInt();
  }

  try_commission(): CallResult<BigInt> {
    let result = super.tryCall("commission", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  contractBalance(): Market__contractBalanceResult {
    let result = super.call("contractBalance", []);

    return new Market__contractBalanceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_contractBalance(): CallResult<Market__contractBalanceResult> {
    let result = super.tryCall("contractBalance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Market__contractBalanceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getExchangeInfoReceiving(
    _sendingToken: Address,
    _receivingAmount: BigInt
  ): Market__getExchangeInfoReceivingResult {
    let result = super.call("getExchangeInfoReceiving", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromUnsignedBigInt(_receivingAmount)
    ]);

    return new Market__getExchangeInfoReceivingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getExchangeInfoReceiving(
    _sendingToken: Address,
    _receivingAmount: BigInt
  ): CallResult<Market__getExchangeInfoReceivingResult> {
    let result = super.tryCall("getExchangeInfoReceiving", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromUnsignedBigInt(_receivingAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Market__getExchangeInfoReceivingResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getExchangeInfoSending(
    _sendingToken: Address,
    _sendingAmount: BigInt
  ): Market__getExchangeInfoSendingResult {
    let result = super.call("getExchangeInfoSending", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromUnsignedBigInt(_sendingAmount)
    ]);

    return new Market__getExchangeInfoSendingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getExchangeInfoSending(
    _sendingToken: Address,
    _sendingAmount: BigInt
  ): CallResult<Market__getExchangeInfoSendingResult> {
    let result = super.tryCall("getExchangeInfoSending", [
      EthereumValue.fromAddress(_sendingToken),
      EthereumValue.fromUnsignedBigInt(_sendingAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Market__getExchangeInfoSendingResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getSideWhenSending(_tokenAddress: Address): boolean {
    let result = super.call("getSideWhenSending", [
      EthereumValue.fromAddress(_tokenAddress)
    ]);

    return result[0].toBoolean();
  }

  try_getSideWhenSending(_tokenAddress: Address): CallResult<boolean> {
    let result = super.tryCall("getSideWhenSending", [
      EthereumValue.fromAddress(_tokenAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _change(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _commission(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _charger(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ToggleSwitchCall extends EthereumCall {
  get inputs(): ToggleSwitchCall__Inputs {
    return new ToggleSwitchCall__Inputs(this);
  }

  get outputs(): ToggleSwitchCall__Outputs {
    return new ToggleSwitchCall__Outputs(this);
  }
}

export class ToggleSwitchCall__Inputs {
  _call: ToggleSwitchCall;

  constructor(call: ToggleSwitchCall) {
    this._call = call;
  }
}

export class ToggleSwitchCall__Outputs {
  _call: ToggleSwitchCall;

  constructor(call: ToggleSwitchCall) {
    this._call = call;
  }
}

export class SetChangeCall extends EthereumCall {
  get inputs(): SetChangeCall__Inputs {
    return new SetChangeCall__Inputs(this);
  }

  get outputs(): SetChangeCall__Outputs {
    return new SetChangeCall__Outputs(this);
  }
}

export class SetChangeCall__Inputs {
  _call: SetChangeCall;

  constructor(call: SetChangeCall) {
    this._call = call;
  }

  get _newChange(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetChangeCall__Outputs {
  _call: SetChangeCall;

  constructor(call: SetChangeCall) {
    this._call = call;
  }
}

export class SetCommissionCall extends EthereumCall {
  get inputs(): SetCommissionCall__Inputs {
    return new SetCommissionCall__Inputs(this);
  }

  get outputs(): SetCommissionCall__Outputs {
    return new SetCommissionCall__Outputs(this);
  }
}

export class SetCommissionCall__Inputs {
  _call: SetCommissionCall;

  constructor(call: SetCommissionCall) {
    this._call = call;
  }

  get _newCommission(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCommissionCall__Outputs {
  _call: SetCommissionCall;

  constructor(call: SetCommissionCall) {
    this._call = call;
  }
}

export class WithdrawlCall extends EthereumCall {
  get inputs(): WithdrawlCall__Inputs {
    return new WithdrawlCall__Inputs(this);
  }

  get outputs(): WithdrawlCall__Outputs {
    return new WithdrawlCall__Outputs(this);
  }
}

export class WithdrawlCall__Inputs {
  _call: WithdrawlCall;

  constructor(call: WithdrawlCall) {
    this._call = call;
  }

  get _currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawlCall__Outputs {
  _call: WithdrawlCall;

  constructor(call: WithdrawlCall) {
    this._call = call;
  }
}

export class SellPiCall extends EthereumCall {
  get inputs(): SellPiCall__Inputs {
    return new SellPiCall__Inputs(this);
  }

  get outputs(): SellPiCall__Outputs {
    return new SellPiCall__Outputs(this);
  }
}

export class SellPiCall__Inputs {
  _call: SellPiCall;

  constructor(call: SellPiCall) {
    this._call = call;
  }
}

export class SellPiCall__Outputs {
  _call: SellPiCall;

  constructor(call: SellPiCall) {
    this._call = call;
  }
}

export class TokenFallbackCall extends EthereumCall {
  get inputs(): TokenFallbackCall__Inputs {
    return new TokenFallbackCall__Inputs(this);
  }

  get outputs(): TokenFallbackCall__Outputs {
    return new TokenFallbackCall__Outputs(this);
  }
}

export class TokenFallbackCall__Inputs {
  _call: TokenFallbackCall;

  constructor(call: TokenFallbackCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TokenFallbackCall__Outputs {
  _call: TokenFallbackCall;

  constructor(call: TokenFallbackCall) {
    this._call = call;
  }
}
