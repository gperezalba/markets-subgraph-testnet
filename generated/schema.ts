// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Controller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Controller entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Controller entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Controller", id.toString(), this);
  }

  static load(id: string): Controller | null {
    return store.get("Controller", id) as Controller | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get commission(): BigDecimal {
    let value = this.get("commission");
    return value.toBigDecimal();
  }

  set commission(value: BigDecimal) {
    this.set("commission", Value.fromBigDecimal(value));
  }

  get updated(): boolean {
    let value = this.get("updated");
    return value.toBoolean();
  }

  set updated(value: boolean) {
    this.set("updated", Value.fromBoolean(value));
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Market entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Market entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Market", id.toString(), this);
  }

  static load(id: string): Market | null {
    return store.get("Market", id) as Market | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currency1(): string {
    let value = this.get("currency1");
    return value.toString();
  }

  set currency1(value: string) {
    this.set("currency1", Value.fromString(value));
  }

  get currency2(): string {
    let value = this.get("currency2");
    return value.toString();
  }

  set currency2(value: string) {
    this.set("currency2", Value.fromString(value));
  }

  get currency1Balance(): BigDecimal {
    let value = this.get("currency1Balance");
    return value.toBigDecimal();
  }

  set currency1Balance(value: BigDecimal) {
    this.set("currency1Balance", Value.fromBigDecimal(value));
  }

  get currency2Balance(): BigDecimal {
    let value = this.get("currency2Balance");
    return value.toBigDecimal();
  }

  set currency2Balance(value: BigDecimal) {
    this.set("currency2Balance", Value.fromBigDecimal(value));
  }

  get change(): BigDecimal {
    let value = this.get("change");
    return value.toBigDecimal();
  }

  set change(value: BigDecimal) {
    this.set("change", Value.fromBigDecimal(value));
  }

  get commission(): BigDecimal {
    let value = this.get("commission");
    return value.toBigDecimal();
  }

  set commission(value: BigDecimal) {
    this.set("commission", Value.fromBigDecimal(value));
  }

  get updated(): boolean {
    let value = this.get("updated");
    return value.toBoolean();
  }

  set updated(value: boolean) {
    this.set("updated", Value.fromBoolean(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenDecimals(): i32 {
    let value = this.get("tokenDecimals");
    return value.toI32();
  }

  set tokenDecimals(value: i32) {
    this.set("tokenDecimals", Value.fromI32(value));
  }

  get tokenSymbol(): string {
    let value = this.get("tokenSymbol");
    return value.toString();
  }

  set tokenSymbol(value: string) {
    this.set("tokenSymbol", Value.fromString(value));
  }

  get tokenName(): string {
    let value = this.get("tokenName");
    return value.toString();
  }

  set tokenName(value: string) {
    this.set("tokenName", Value.fromString(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get updated(): boolean {
    let value = this.get("updated");
    return value.toBoolean();
  }

  set updated(value: boolean) {
    this.set("updated", Value.fromBoolean(value));
  }
}

export class Exchange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Exchange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Exchange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Exchange", id.toString(), this);
  }

  static load(id: string): Exchange | null {
    return store.get("Exchange", id) as Exchange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get isBuyPi(): boolean {
    let value = this.get("isBuyPi");
    return value.toBoolean();
  }

  set isBuyPi(value: boolean) {
    this.set("isBuyPi", Value.fromBoolean(value));
  }

  get isSellPi(): boolean {
    let value = this.get("isSellPi");
    return value.toBoolean();
  }

  set isSellPi(value: boolean) {
    this.set("isSellPi", Value.fromBoolean(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}
